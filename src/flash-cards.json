[{"question":"<ol>\n<li><p>In Javascript Which operation is faster</p>\n<ul>\n<li>String concatination</li>\n</ul>\n<pre><code> const x = &quot;good&quot;\n const y = &quot;morning&quot;\n const result = x + &quot; &quot; + y</code></pre><ul>\n<li>String interpolation </li>\n</ul>\n<pre><code> const x = &quot;good&quot;\n const y = &quot;morning&quot;\n const result = `${x} ${y}`</code></pre></li>\n<li><p>Which is the preferred method</p>\n</li>\n</ol>","answer":"<ol>\n<li>String concatenation is more performant than interpolation by a small margin</li>\n<li>As the efficiency gain of concatenation is only minor in most cases using interpolation to improve readability would be prefered</li>\n</ol>"},{"question":"<p>In PSQL is the operator <code>AS</code> required when providing an alias for a column or table?</p>","answer":"<p>No, the following two examples are just as valid</p>\n<pre><code>select tb.id as member_id from (\n select member_id as id from member\n) as tb</code></pre><pre><code>select tb.id member_id from (\n select member_id id from member\n) tb</code></pre>"},{"question":"<p>In PSQL how do you concatenate the values from two columns?</p>","answer":"<p>By using the string concatenation operator <code>||</code></p>\n<p>This requires at least one of the values to be a string</p>\n<pre><code>SELECT first_name || last_name AS full_name FROM people;</code></pre><pre><code>SELECT first_name || &quot; - &quot; ||  age AS person_with_age FROM people;</code></pre>"},{"question":"<p>In PSQL what is the difference between <code>limit</code> and <code>fetch</code>?</p>","answer":"<p>There is no performance difference between the two. The only difference is syntactic.\nFetch is included to as it is apart of the SQL standard.</p>\n<p>For more details view <a href=\"../raw-notes/database/psql/returning-a-set-amount-of-results.md\">returning-a-set-amount-of-results.md</a></p>"},{"question":"<p>In PSQL when using the operator <code>LIKE</code> What two characters are used to create patterns and how do they work.</p>","answer":"<ul>\n<li><p><code>%</code>: match against 0 or more characters</p>\n</li>\n<li><p><code>_</code>: match against a single character</p>\n</li>\n</ul>"},{"question":"<p>In PSQL what is the difference between <code>LIKE</code> and <code>ILIKE</code></p>","answer":"<ul>\n<li><code>LIKE</code> is a case sensitive matcher</li>\n<li><code>ILIKE</code> is a case insensitive matcher</li>\n</ul>"},{"question":"<p>In PSQL what rules are applied when using the <code>UNION</code> operator</p>","answer":"<ul>\n<li>All duplicate rows are removed (unless <code>UNION ALL</code> is used).</li>\n<li>Both queries must return the same number of columns.</li>\n<li>The corresponding columns in the queries must have compatible data types.</li>\n</ul>"},{"question":"<p>In PSQL what is the syntax for a query using the <code>UNION</code> operator</p>","answer":"<pre><code>SELECT *\nFROM table_1\nUNION\nSELECT *\nFROM table_2;</code></pre><pre><code>SELECT name, age\nFROM table_1\nUNION ALL\nSELECT name, age\nFROM table_2\nORDER BY age DESC;</code></pre>"},{"question":"<p>In SQL how does the <code>HAVING</code> operator work?</p>","answer":"<p>The operator <code>HAVING</code> is uesd to apply conditions to a query while grouping data.</p>\n<pre><code>SELECT count(*) \nFROM person \nGROUP BY age \nHAVING age&lt;=30</code></pre><pre><code>SELECT count(*) person_count, age \nFROM person \nGROUP BY age \nHAVING person_count&gt;=3</code></pre>"},{"question":"<p>In SQL what are the different types of Joins</p>","answer":"<ul>\n<li>Left / Right Inner Join </li>\n<li>Left / Right Outer Join</li>\n<li>Full Outer Join</li>\n<li>Self Join</li>\n<li>Cross Join</li>\n<li>Natural Join</li>\n</ul>"}]
