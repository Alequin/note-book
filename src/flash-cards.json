[{"question":"<p>In Javascript / React should the function <code>getBoundingClientRect</code> be used in a React components render method?</p>","answer":"<p>No. The function <code>getBoundingClientRect</code>, when used in the render method, is unperformant and can cause issues.</p>\n<p>If you need to use it make you should attempt to improve performance with <code>useMemo</code> or <code>useCallback</code>.</p>"},{"question":"<ol>\n<li><p>In Javascript Which operation is faster</p>\n<ul>\n<li>String concatination</li>\n</ul>\n<pre><code> const x = &quot;good&quot;\n const y = &quot;morning&quot;\n const result = x + &quot; &quot; + y</code></pre><ul>\n<li>String interpolation </li>\n</ul>\n<pre><code> const x = &quot;good&quot;\n const y = &quot;morning&quot;\n const result = `${x} ${y}`</code></pre></li>\n<li><p>Which is the preferred method</p>\n</li>\n</ol>","answer":"<ol>\n<li>String concatenation is more performant than interpolation by a small margin</li>\n<li>As the efficiency gain of concatenation is only minor in most cases using interpolation to improve readability would be prefered</li>\n</ol>"},{"question":"<p>In Javascript what is the difference between classing function definition and arrow function definition</p>","answer":"<ul>\n<li><p>This keyword binding</p>\n<ul>\n<li>In arrow functions <code>this</code> is lexically bound (<code>this</code> refers to its parent)</li>\n</ul>\n</li>\n</ul>\n<pre><code>this.number = 52;\nconst foo = () =&gt; this.number;\nfunction bar() {\n  return this.number;\n}\n\nconsole.log(foo()); \n// 52\nconsole.log(bar()); \n// undefined</code></pre><hr>\n<ul>\n<li>The array <code>arguments</code> is not available in arrow functions</li>\n</ul>\n<pre><code>function foo() {\n  return arguments;\n}\nconst bar = () =&gt; arguments;\n\nconsole.log(bar(1, 2, 3, 4)); \n// { &#39;0&#39;: 1, &#39;1&#39;: 2, &#39;2&#39;: 3, &#39;3&#39;: 4 }\n\nconsole.log(foo(1, 2, 3, 4)); \n// Uncaught ReferenceError: arguments is not defined</code></pre><ul>\n<li><p>If the parent of the arrow function has an <code>arguments</code> array this is accessible</p>\n<pre><code>function baz(){return () =&gt; arguments}\n\nconsole.log(baz(4, 5, 6)()) \n// { &#39;0&#39;: 4, &#39;1&#39;: 5, &#39;2&#39;: 6 }</code></pre></li>\n</ul>\n<hr>\n<ul>\n<li>Arrow functions can not be called with the keyword <code>new</code> </li>\n</ul>"},{"question":"<p>In PSQL is the operator <code>AS</code> required when providing an alias for a column or table?</p>","answer":"<p>No, the following two examples are just as valid</p>\n<pre><code>select tb.id as member_id from (\n select member_id as id from member\n) as tb</code></pre><pre><code>select tb.id member_id from (\n select member_id id from member\n) tb</code></pre>"},{"question":"<p>In PSQL how are the clauses <code>ANY</code> and <code>ALL</code> used?</p>","answer":"<p>Both are used to filter the returned rows of a query based on a condition placed against a subquery.</p>\n<ul>\n<li><code>ANY</code> returns all rows where at least one row in the subquery passes the given condition</li>\n</ul>\n<pre><code>SELECT * \nFROM tb1 \nWHERE age &lt; ANY (\n  SELECT age FROM tb2\n)</code></pre><ul>\n<li><code>ALL</code> returns all rows where at every row in the subquery passes the given condition</li>\n</ul>\n<pre><code>SELECT * \nFROM tb1 \nWHERE age &gt;= ALL (\n  SELECT age FROM tb2\n)</code></pre>"},{"question":"<p>In PSQL how do you concatenate the values from two columns?</p>","answer":"<p>By using the string concatenation operator <code>||</code></p>\n<p>This requires at least one of the values to be a string</p>\n<pre><code>SELECT first_name || last_name AS full_name FROM people;</code></pre><pre><code>SELECT first_name || &quot; - &quot; ||  age AS person_with_age FROM people;</code></pre>"},{"question":"<p>In PSQL what is the difference between <code>limit</code> and <code>fetch</code>?</p>","answer":"<p>There is no performance difference between the two. The only difference is syntactic.\nFetch is included to as it is apart of the SQL standard.</p>\n<p>For more details view <a href=\"../raw-notes/database/psql/returning-a-set-amount-of-results.md\">returning-a-set-amount-of-results.md</a></p>"},{"question":"<p>In PSQL what does the operator <code>EXCEPT</code> do?</p>","answer":"<p>The <code>EXCEPT</code> operator returns all the rows in the left table that are not included in the right table</p>\n<pre><code>SELECT name, age\nFROM person\nEXCEPT\n   SELECT name, age\n   FROM person\n   INNER JOIN pets ON person.name=pets.owner</code></pre>"},{"question":"<p>In PSQL what does the <code>EXISTS</code> clause do and how is it used.</p>","answer":"<p>The <code>EXISTS</code> clause is used with subqueries. If the subquery does not return and rows then the primary query will also return zero rows.</p>\n<p>The table in the subquery can be the same or different from those used in the primary query.</p>\n<pre><code>SELECT * \nFROM tb1 \nWHERE EXISTS (SELECT 1 FROM tb2 WHERE age &lt; 10)</code></pre><p><a href=\"http://www.postgresqltutorial.com/postgresql-exists/\">postgresql-exists/postgresqltutorial</a></p>"},{"question":"<p>In PSQL what does the subclause <code>CUBE</code> of the option <code>GROUPING SETS</code> do?</p>","answer":"<p>The subclause <code>CUBE</code> is used to define all variations of grouping sets. The following examples will produce the same result.</p>\n<pre><code>SELECT gender, country, eye_colour\nFROM person \nGROUP BY CUBE(gender, country, eye_colour);</code></pre><pre><code>SELECT gender, country, eye_colour\nFROM person \nGROUP BY \n    GROUPING SETS (\n      (gender, country, eye_colour),\n      (gender, country),\n      (gender, eye_colour),\n      (country, eye_colour),\n      (gender),\n      (country),\n      (eye_colour),\n      ()\n);</code></pre><p><a href=\"http://www.postgresqltutorial.com/postgresql-grouping-sets/\">postgresql-grouping-sets</a>\n<a href=\"http://www.postgresqltutorial.com/postgresql-cube/\">postgresql-cube</a>\n<a href=\"https://stackoverflow.com/questions/25274879/when-to-use-grouping-sets-cube-and-rollup\">When to use GROUPING SETS, CUBE and ROLLUP</a>\n<a href=\"https://docs.snowflake.net/manuals/sql-reference/constructs/group-by-grouping-sets.html\">group-by-grouping-sets</a></p>"},{"question":"<p>In PSQL what does the subclause <code>ROLLUP</code> of the option <code>GROUPING SETS</code> do?</p>","answer":"<p>The subclause <code>ROLLUP</code> is used to define subset of grouping set variations based on the order of the columns provided. The following examples will produce the same result.</p>\n<pre><code>SELECT gender, country, eye_colour\nFROM person \nGROUP BY ROLLUP(gender, country, eye_colour);</code></pre><pre><code>SELECT gender, country, eye_colour\nFROM person \nGROUP BY \n    GROUPING SETS (\n      (gender, country, eye_colour),\n      (gender, country),\n      (gender),\n      ()\n);</code></pre><p><a href=\"http://www.postgresqltutorial.com/postgresql-grouping-sets/\">postgresql-grouping-sets</a>\n<a href=\"http://www.postgresqltutorial.com/postgresql-rollup/\">postgresql-rollup</a>\n<a href=\"https://stackoverflow.com/questions/25274879/when-to-use-grouping-sets-cube-and-rollup\">When to use GROUPING SETS, CUBE and ROLLUP</a>\n<a href=\"https://docs.snowflake.net/manuals/sql-reference/constructs/group-by-grouping-sets.html\">group-by-grouping-sets</a></p>"},{"question":"<p>In PSQL what is <code>GROUPING SETS</code> and why would you use it?</p>","answer":"<p><code>GROUPING SETS</code> is used to include multiple grouping conditions in a single query.\nIt is a performance tool as this method is more efficient than individual queries.</p>\n<pre><code>SELECT gender, country\nFROM person \nGROUP BY \n    GROUPING SETS (\n      (gender, country),\n      (gender),\n      (country),\n      ()\n);</code></pre><p><a href=\"http://www.postgresqltutorial.com/postgresql-grouping-sets/\">postgresql-grouping-sets</a>\n<a href=\"http://www.postgresqltutorial.com/postgresql-rollup/\">postgresql-rollup</a>\n<a href=\"https://stackoverflow.com/questions/25274879/when-to-use-grouping-sets-cube-and-rollup\">When to use GROUPING SETS, CUBE and ROLLUP</a>\n<a href=\"https://docs.snowflake.net/manuals/sql-reference/constructs/group-by-grouping-sets.html\">group-by-grouping-sets</a></p>"},{"question":"<p>In PSQL when using the operator <code>LIKE</code> What two characters are used to create patterns and how do they work.</p>","answer":"<ul>\n<li><p><code>%</code>: match against 0 or more characters</p>\n</li>\n<li><p><code>_</code>: match against a single character</p>\n</li>\n</ul>"},{"question":"<p>In PSQL what is the difference between <code>LIKE</code> and <code>ILIKE</code></p>","answer":"<ul>\n<li><code>LIKE</code> is a case sensitive matcher</li>\n<li><code>ILIKE</code> is a case insensitive matcher</li>\n</ul>"},{"question":"<p>In PSQL what rules are applied when using the <code>UNION</code> operator</p>","answer":"<ul>\n<li>All duplicate rows are removed (unless <code>UNION ALL</code> is used).</li>\n<li>Both queries must return the same number of columns.</li>\n<li>The corresponding columns in the queries must have compatible data types.</li>\n</ul>"},{"question":"<p>What would happen if you create a temporary table with the same name as a permanant table?</p>","answer":"<p>When a temporary table and a permanant table share a name the result of querying the table name will come from the temporary table. The temp table will hide the permanant table (this is not advised).</p>"},{"question":"<p>In PSQL how would you use the clause <code>INTO</code> to create a temporary table, who could view the table and what would the life span of this table be?</p>","answer":"<ul>\n<li>To create a temporary table</li>\n</ul>\n<pre><code>SELECT * INTO TEMP temp_table_name FROM table_name;</code></pre><p>Temporary tables </p>\n<ul>\n<li>Are only visible to the session which created it </li>\n<li>Are removed when the current session ends.</li>\n</ul>"},{"question":"<p>In PSQL what is the syntax for a query using the <code>UNION</code> operator</p>","answer":"<pre><code>SELECT *\nFROM table_1\nUNION\nSELECT *\nFROM table_2;</code></pre><pre><code>SELECT name, age\nFROM table_1\nUNION ALL\nSELECT name, age\nFROM table_2\nORDER BY age DESC;</code></pre>"},{"question":"<p>In PSQL what is an OID?</p>","answer":"<p>An OID (Object identifier) is an internal id used to reference tables</p>\n<p><a href=\"https://www.postgresql.org/docs/12/datatype-oid.html\">postgresql docs - 8.19. Object Identifier Types</a> </p>"},{"question":"<p>In SQL how does the <code>HAVING</code> operator work?</p>","answer":"<p>The operator <code>HAVING</code> is uesd to apply conditions to a query while grouping data.</p>\n<pre><code>SELECT count(*) \nFROM person \nGROUP BY age \nHAVING age&lt;=30</code></pre><pre><code>SELECT count(*) person_count, age \nFROM person \nGROUP BY age \nHAVING person_count&gt;=3</code></pre>"},{"question":"<p>In SQL what are the different types of Joins</p>","answer":"<ul>\n<li>Left / Right Inner Join </li>\n<li>Left / Right Outer Join</li>\n<li>Full Outer Join</li>\n<li>Self Join</li>\n<li>Cross Join</li>\n<li>Natural Join</li>\n</ul>"}]
