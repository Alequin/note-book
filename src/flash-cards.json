[
  {
    "question": "<p>In bash what command would you use to count the number of lines in a single file?</p>",
    "answer": "<p><code>wc -l &lt;file-name&gt;</code></p>"
  },
  {
    "question": "<p>In functional programming what is <strong>Partial Application</strong></p>",
    "answer": "<p>Partial application is basically nested curry functions. </p>\n<p>In the following example the first and second call both return a function</p>\n<pre><code>const { orderBy } = require(&quot;lodash&quot;);\n\nconst sortArrayOfObjects = order =&gt; propertyName =&gt; array =&gt;\n  orderBy(array, [propertyName], [order]);\n\nconst sortDescending = sortArrayOfObjects(&quot;asc&quot;);\nconst sortByName = sortDescending(&quot;name&quot;);\nconst sortedArray = sortByName([{ name: &quot;tim&quot; }, { name: &quot;sally&quot; }]);</code></pre>"
  },
  {
    "question": "<p>What is HTTP keep alive, why use it and what are the pros and cons of its use?</p>",
    "answer": "<p>HTTP keep alive is an instruction that allows a single TCP connection to remain open for multiple HTTP requests.</p>\n<p>By default, HTTP connections close after each request meaning a new connection is required for each request. This can lead to high load times.</p>\n<p>Enabling the keep-alive header allows you to serve all requests over a <strong>single connection</strong>.</p>\n<p>Establishing a TCP connection first requires a three-way handshake – a mutual exchange of SYN and ACK packets between a client and server before data can be transmitted. Using the keep-alive header means not having to constantly perform this process.</p>\n<ul>\n<li><p><strong>Pros</strong></p>\n<ul>\n<li><strong>Decreased latency</strong> – Reducing the number of three-way handshakes can lead to improved site latency. This is especially true with SSL/TLS connections, which require additional round-trips to encrypt and verify connections.</li>\n<li><strong>Reduced network congestion</strong> – Reducing the number of TCP connections between your servers and clients can lead to a drop in network congestion.</li>\n<li><strong>Resource conservation</strong> – It’s less taxing on network resources and server resources (CPU) to use a single connection per client.</li>\n</ul>\n</li>\n<li><p><strong>Cons</strong></p>\n<ul>\n<li><strong>Connections will remain open if not managed</strong> - the server will keep the TCP/IP connection open until the client closes it, or it expires on the server. It will be important to set up a correct time-out value on the server, just in case there are too many open connections not being closed by the client</li>\n<li><strong>Increased server memory usage</strong> - RAM is required to maintain an open connection</li>\n</ul>\n</li>\n<li><p><strong>Notes</strong></p>\n<ul>\n<li>Latency on LAN connections is negligable so Keep-Alive may not provide any benifit in.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li><a href=\"https://www.imperva.com/learn/performance/http-keep-alive/\">https://www.imperva.com/learn/performance/http-keep-alive/</a></li>\n<li><a href=\"https://www.quora.com/Are-there-any-disadvantages-of-enabling-Keep-Alive-on-WebServer\">https://www.quora.com/Are-there-any-disadvantages-of-enabling-Keep-Alive-on-WebServer</a></li>\n<li><a href=\"https://www.seo.co.uk/should-you-enable-keepalive/\">https://www.seo.co.uk/should-you-enable-keepalive/</a></li>\n</ul>"
  },
  {
    "question": "<p>In Javascript / React should the function <code>getBoundingClientRect</code> be used in a React components render method?</p>",
    "answer": "<p>No. The function <code>getBoundingClientRect</code>, when used in the render method, is unperformant and can cause issues.</p>\n<p>If you need to use it make you should attempt to improve performance with <code>useMemo</code> or <code>useCallback</code>.</p>"
  },
  {
    "question": "<p>In Javascript how can you use console to track how long a section of code ran for?</p>",
    "answer": "<p><code>console.time(&lt;string&gt;)</code> and <code>console.timeEnd(&lt;string&gt;)</code></p>\n<p>Using time and timeEnd will provide a report on how long the code between the two calls took. Both functions take a key, to ensure the correct report is given both must be provided the same key</p>\n<pre><code>const wait = () =&gt; ;\n\n(async () =&gt; {\n  console.time(&quot;my-key&quot;);\n  await new Promise(resolve =&gt; setTimeout(resolve, 10000))\n  console.timeEnd(&quot;my-key&quot;);\n})();\n\n=&gt; key: 10012.142ms</code></pre>"
  },
  {
    "question": "<ol>\n<li><p>In Javascript Which operation is faster</p>\n<ul>\n<li>String concatination</li>\n</ul>\n<pre><code> const x = &quot;good&quot;\n const y = &quot;morning&quot;\n const result = x + &quot; &quot; + y</code></pre><ul>\n<li>String interpolation </li>\n</ul>\n<pre><code> const x = &quot;good&quot;\n const y = &quot;morning&quot;\n const result = `${x} ${y}`</code></pre></li>\n<li><p>Which is the preferred method</p>\n</li>\n</ol>",
    "answer": "<ol>\n<li>String concatenation is more performant than interpolation by a small margin</li>\n<li>As the efficiency gain of concatenation is only minor in most cases using interpolation to improve readability would be prefered</li>\n</ol>"
  },
  {
    "question": "<p>In Javascript what formatting can be done when using console.log?</p>",
    "answer": "<p><code>%s</code> - replace with a string\n<code>%d</code> - replace with a decimal\n<code>%o</code> - replace with an object </p>\n<pre><code>console.log(&quot;This is a %s. The year is %d. The scores are %o&quot;, &quot;Test!&quot;, 2020, {sam: 5, alex: 2, dog: 100})\n\n=&gt; This is a Test!. The year is 2020. The scores are { sam: 5, alex: 2, dog: 100 }</code></pre>"
  },
  {
    "question": "<p>In Javascript how can the function <code>Object.entries()</code> be used to loop over an object with a for-each loop</p>",
    "answer": "<pre><code>const obj = { a: 1, b: 2, c: 3 };\n\nfor (const [key, value] of Object.entries(obj)) {\n  console.log(key, value);\n}\n</code></pre>"
  },
  {
    "question": "<p>In Javascript what do the functions <code>trimStart</code> <code>trimEnd</code> do?</p>",
    "answer": "<p>Similar to <code>trim</code> only they remove white space from either the front (<code>trimStart</code>) or back (<code>trimEnd</code>) of the string</p>"
  },
  {
    "question": "<p>In Javascript what is the difference between classic function definition and arrow function definition</p>",
    "answer": "<ul>\n<li><p>This keyword binding</p>\n<ul>\n<li>In arrow functions <code>this</code> is lexically bound (<code>this</code> refers to its parent)</li>\n</ul>\n</li>\n</ul>\n<pre><code>this.number = 52;\nconst foo = () =&gt; this.number;\nfunction bar() {\n  return this.number;\n}\n\nconsole.log(foo()); \n// 52\nconsole.log(bar()); \n// undefined</code></pre><hr>\n<ul>\n<li>The array <code>arguments</code> is not available in arrow functions</li>\n</ul>\n<pre><code>function foo() {\n  return arguments;\n}\nconst bar = () =&gt; arguments;\n\nconsole.log(bar(1, 2, 3, 4)); \n// { &#39;0&#39;: 1, &#39;1&#39;: 2, &#39;2&#39;: 3, &#39;3&#39;: 4 }\n\nconsole.log(foo(1, 2, 3, 4)); \n// Uncaught ReferenceError: arguments is not defined</code></pre><ul>\n<li><p>If the parent of the arrow function has an <code>arguments</code> array this is accessible</p>\n<pre><code>function baz(){return () =&gt; arguments}\n\nconsole.log(baz(4, 5, 6)()) \n// { &#39;0&#39;: 4, &#39;1&#39;: 5, &#39;2&#39;: 6 }</code></pre></li>\n</ul>\n<hr>\n<ul>\n<li>Arrow functions can not be called with the keyword <code>new</code> </li>\n</ul>"
  },
  {
    "question": "<p>In Javascript what are the primitive types?</p>",
    "answer": "<ul>\n<li>Boolean</li>\n<li>Number</li>\n<li>String</li>\n<li>BigInt</li>\n<li>Symbol</li>\n<li>Null</li>\n<li>Undefined</li>\n</ul>"
  },
  {
    "question": "<p>What characters are valid for use in a Kafka topic name?</p>",
    "answer": "<p>When a topic is created its name is validated by the function <code>Topic.validate</code>. The name must only contain chars which match the regex <a href=\"https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/common/internals/Topic.java#L29\">a-zA-Z0-9._-</a></p>"
  },
  {
    "question": "<p>In PSQL what would the index of an array be?</p>",
    "answer": "<p>In PSQL the first index in an array is &#39;1&#39; as shown in example 1</p>\n<pre><code>example 1\n\nSELECT names[1] AS first_element \nFROM\n(\n  SELECT \n      ARRAY [ &#39;sam&#39;, &#39;jane&#39;, &#39;jill&#39;, &#39;bob&#39; ] AS names\n) AS tb</code></pre><p>Example 2 would return null </p>\n<pre><code>example 2\n\nSELECT names[0] AS first_element \nFROM\n(\n  SELECT \n      ARRAY [ &#39;sam&#39;, &#39;jane&#39;, &#39;jill&#39;, &#39;bob&#39; ] AS names\n) AS tb</code></pre>"
  },
  {
    "question": "<p>In PSQL is the operator <code>AS</code> required when providing an alias for a column or table?</p>",
    "answer": "<p>No, the following two examples are just as valid</p>\n<pre><code>select tb.id as member_id from (\n select member_id as id from member\n) as tb</code></pre><pre><code>select tb.id member_id from (\n select member_id id from member\n) tb</code></pre>"
  },
  {
    "question": "<p>In PSQL how are the clauses <code>ANY</code> and <code>ALL</code> used?</p>",
    "answer": "<p>Both are used to filter the returned rows of a query based on a condition placed against a subquery.</p>\n<ul>\n<li><code>ANY</code> returns all rows where at least one row in the subquery passes the given condition</li>\n</ul>\n<pre><code>SELECT * \nFROM tb1 \nWHERE age &lt; ANY (\n  SELECT age FROM tb2\n)</code></pre><ul>\n<li><code>ALL</code> returns all rows where at every row in the subquery passes the given condition</li>\n</ul>\n<pre><code>SELECT * \nFROM tb1 \nWHERE age &gt;= ALL (\n  SELECT age FROM tb2\n)</code></pre>"
  },
  {
    "question": "<p>In PSQL how do you cast between different data types?</p>",
    "answer": "<p>The following syntax is used to cast to different data types\n<code>&lt;value&gt;::&lt;typeToCastTo&gt;</code></p>\n<pre><code>SELECT\n  &#39;100&#39;::INTEGER,\n  &#39;01-OCT-2015&#39;::DATE;</code></pre><pre><code>SELECT \n  (score::float / 100) AS percentage\nFROM scores</code></pre>"
  },
  {
    "question": "<p>In PSQL what does the function &quot;COALESCE&quot; do?</p>",
    "answer": "<p>&quot;COALESCE&quot; returns the first value that is not null</p>\n<pre><code>SELECT\n   COALESCE (NULL, 2 , 1);</code></pre>"
  },
  {
    "question": "<p>In PSQL how do you concatenate the values from two columns?</p>",
    "answer": "<p>By using the string concatenation operator <code>||</code></p>\n<p>This requires at least one of the values to be a string</p>\n<pre><code>SELECT first_name || last_name AS full_name FROM people;</code></pre><pre><code>SELECT first_name || &quot; - &quot; ||  age AS person_with_age FROM people;</code></pre>"
  },
  {
    "question": "<p>In PSQL which method of creating a table from query results is prefered and why?</p>\n<ul>\n<li>Method 1</li>\n</ul>\n<pre><code>SELECT * INTO new_table_name \nFROM old_table_name otb \nWHERE otb.name=&#39;Sally&#39;;</code></pre><ul>\n<li>Method 2</li>\n</ul>\n<pre><code>CREATE TABLE new_table_name \nAS \n  SELECT * FROM old_table_name otb \n  WHERE otb.name=&#39;Sally&#39;;</code></pre>",
    "answer": "<p>Method 2 is preferred</p>\n<ul>\n<li><code>SELECT INTO</code> for table creation is deprecated</li>\n<li>The SQL standard does not use <code>SELECT INTO</code> to create tables</li>\n<li><code>CREATE TABLE AS</code> offers a superset of the functionality provided by <code>SELECT INTO</code></li>\n<li><code>CREATE TABLE AS</code> preserves columns nullable constraints.</li>\n</ul>\n<p>Full answer  =&gt; <a href=\"https://dba.stackexchange.com/questions/156105/create-table-as-vs-select-into\">https://dba.stackexchange.com/questions/156105/create-table-as-vs-select-into</a></p>"
  },
  {
    "question": "<p>In PSQL what is a CTE, what does it stand for and what is the syntax to use one?</p>",
    "answer": "<p>A CTE (common table expression) creates a temporary value which can be queried using the given alias</p>\n<pre><code>WITH adults AS (\n    SELECT * FROM people WHERE age &gt;= 18\n)\nSELECT * FROM adults WHERE name LIKE &#39;J%&#39;</code></pre><p>Any previous temporary queries defined in a CTE can be used by any following definitions </p>\n<pre><code>WITH adults AS (\n    SELECT * FROM people WHERE age &gt;= 18\n),\nadults2 AS (\n      SELECT * FROM adults WHERE event_year &gt;= 2005\n)\nSELECT * FROM adults2 WHERE name LIKE &#39;J%&#39;</code></pre>"
  },
  {
    "question": "<p>In PSQL what is the difference between <code>limit</code> and <code>fetch</code>?</p>",
    "answer": "<p>There is no performance difference between the two. The only difference is syntactic.\nFetch is included to as it is apart of the SQL standard.</p>\n<p>For more details view <a href=\"../raw-notes/database/psql/returning-a-set-amount-of-results.md\">returning-a-set-amount-of-results.md</a></p>"
  },
  {
    "question": "<p>In PSQL what does the operator <code>EXCEPT</code> do?</p>",
    "answer": "<p>The <code>EXCEPT</code> operator returns all the rows in the left table that are not included in the right table</p>\n<pre><code>SELECT name, age\nFROM person\nEXCEPT\n   SELECT name, age\n   FROM person\n   INNER JOIN pets ON person.name=pets.owner</code></pre>"
  },
  {
    "question": "<p>In PSQL what does the <code>EXISTS</code> clause do and how is it used.</p>",
    "answer": "<p>The <code>EXISTS</code> clause is used with subqueries. If the subquery does not return and rows then the primary query will also return zero rows.</p>\n<p>The table in the subquery can be the same or different from those used in the primary query.</p>\n<pre><code>SELECT * \nFROM tb1 \nWHERE EXISTS (SELECT 1 FROM tb2 WHERE age &lt; 10)</code></pre><p><a href=\"http://www.postgresqltutorial.com/postgresql-exists/\">postgresql-exists/postgresqltutorial</a></p>"
  },
  {
    "question": "<p>In PSQL what do the functions <code>first_value()</code> and <code>last_value()</code> do and how can they be used?</p>",
    "answer": "<p>The function <code>first_value(&lt;columnName&gt;)</code> identifies the first value</p>\n<pre><code>SELECT \n    *,  \n  first_value(age) OVER (ORDER BY event_year)\nFROM test</code></pre><p>The function <code>last_value(&lt;columnName&gt;)</code> identifies the last value </p>\n<pre><code>SELECT \n    *,  \n  last_value(age) OVER (ORDER BY event_year)\nFROM test</code></pre><p>Changing the column order within the <code>OVER</code> clause changes the result</p>\n<pre><code>SELECT \n    *,  \n  last_value(age) OVER (ORDER BY event_year DESC)\nFROM test</code></pre><p>Changing the column order outside the <code>OVER</code> clause will not change the result</p>\n<pre><code>SELECT \n    *,  \n  last_value(age) OVER (ORDER BY event_year)\nFROM test\nORDER BY age</code></pre><ul>\n<li>The clause <code>OVER</code> is required</li>\n<li><code>OVER</code> accepts the clauses <code>ORDER BY</code> and / or <code>PARTITION BY</code> followed by the desired column-name</li>\n</ul>"
  },
  {
    "question": "<p>IN PSQL when working with window functions how would you control the frame used?</p>",
    "answer": "<p>To control the frame of reference when working with window functions you can use the clauses...</p>\n<ul>\n<li><code>UNBOUNDED PRECEDING</code></li>\n<li><code>UNBOUNDED FOLLOWING</code></li>\n<li><code>CURRENT ROW</code></li>\n</ul>\n<p>In example 1 sum(age) would normally take all columns into account but we can force it to only the preceding rows into account to get a sum after each row</p>\n<pre><code>example 1\n\nSELECT \n    *,  \n  sum(age) OVER (ORDER BY age ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)\nFROM test</code></pre><p>In example 2 the same is done but for following rows rather than preceding</p>\n<pre><code>example 2\n\nSELECT \n    *,  \n  sum(age) OVER (ORDER BY age ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)\nFROM test</code></pre><p>In example 3 all values are take into account (which is the default but is shown here as an example)</p>\n<pre><code>example 3\n\nSELECT \n    *,  \n  sum(age) OVER (ORDER BY age ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)\nFROM test</code></pre>"
  },
  {
    "question": "<p>In PSQL what does the subclause <code>CUBE</code> of the option <code>GROUPING SETS</code> do?</p>",
    "answer": "<p>The subclause <code>CUBE</code> is used to define all variations of grouping sets. The following examples will produce the same result.</p>\n<pre><code>SELECT gender, country, eye_colour\nFROM person \nGROUP BY CUBE(gender, country, eye_colour);</code></pre><pre><code>SELECT gender, country, eye_colour\nFROM person \nGROUP BY \n    GROUPING SETS (\n      (gender, country, eye_colour),\n      (gender, country),\n      (gender, eye_colour),\n      (country, eye_colour),\n      (gender),\n      (country),\n      (eye_colour),\n      ()\n);</code></pre><p><a href=\"http://www.postgresqltutorial.com/postgresql-grouping-sets/\">postgresql-grouping-sets</a>\n<a href=\"http://www.postgresqltutorial.com/postgresql-cube/\">postgresql-cube</a>\n<a href=\"https://stackoverflow.com/questions/25274879/when-to-use-grouping-sets-cube-and-rollup\">When to use GROUPING SETS, CUBE and ROLLUP</a>\n<a href=\"https://docs.snowflake.net/manuals/sql-reference/constructs/group-by-grouping-sets.html\">group-by-grouping-sets</a></p>"
  },
  {
    "question": "<p>In PSQL what does the subclause <code>ROLLUP</code> of the option <code>GROUPING SETS</code> do?</p>",
    "answer": "<p>The subclause <code>ROLLUP</code> is used to define subset of grouping set variations based on the order of the columns provided. The following examples will produce the same result.</p>\n<pre><code>SELECT gender, country, eye_colour\nFROM person \nGROUP BY ROLLUP(gender, country, eye_colour);</code></pre><pre><code>SELECT gender, country, eye_colour\nFROM person \nGROUP BY \n    GROUPING SETS (\n      (gender, country, eye_colour),\n      (gender, country),\n      (gender),\n      ()\n);</code></pre><p><a href=\"http://www.postgresqltutorial.com/postgresql-grouping-sets/\">postgresql-grouping-sets</a>\n<a href=\"http://www.postgresqltutorial.com/postgresql-rollup/\">postgresql-rollup</a>\n<a href=\"https://stackoverflow.com/questions/25274879/when-to-use-grouping-sets-cube-and-rollup\">When to use GROUPING SETS, CUBE and ROLLUP</a>\n<a href=\"https://docs.snowflake.net/manuals/sql-reference/constructs/group-by-grouping-sets.html\">group-by-grouping-sets</a></p>"
  },
  {
    "question": "<p>In PSQL what is <code>GROUPING SETS</code> and why would you use it?</p>",
    "answer": "<p><code>GROUPING SETS</code> is used to include multiple grouping conditions in a single query.\nIt is a performance tool as this method is more efficient than individual queries.</p>\n<pre><code>SELECT gender, country\nFROM person \nGROUP BY \n    GROUPING SETS (\n      (gender, country),\n      (gender),\n      (country),\n      ()\n);</code></pre><p><a href=\"http://www.postgresqltutorial.com/postgresql-grouping-sets/\">postgresql-grouping-sets</a>\n<a href=\"http://www.postgresqltutorial.com/postgresql-rollup/\">postgresql-rollup</a>\n<a href=\"https://stackoverflow.com/questions/25274879/when-to-use-grouping-sets-cube-and-rollup\">When to use GROUPING SETS, CUBE and ROLLUP</a>\n<a href=\"https://docs.snowflake.net/manuals/sql-reference/constructs/group-by-grouping-sets.html\">group-by-grouping-sets</a></p>"
  },
  {
    "question": "<p>In PSQL when using the operator <code>LIKE</code> What two characters are used to create patterns and how do they work.</p>",
    "answer": "<ul>\n<li><p><code>%</code>: match against 0 or more characters</p>\n</li>\n<li><p><code>_</code>: match against a single character</p>\n</li>\n</ul>"
  },
  {
    "question": "<p>In PSQL what is the difference between <code>LIKE</code> and <code>ILIKE</code></p>",
    "answer": "<ul>\n<li><code>LIKE</code> is a case sensitive matcher</li>\n<li><code>ILIKE</code> is a case insensitive matcher</li>\n</ul>"
  },
  {
    "question": "<p>In PSQL what does the function <code>ntile()</code> do and how can it be used?</p>",
    "answer": "<p>The function <code>ntile(&lt;bucketCount&gt;)</code> divides a set of values over the desired number of buckets</p>\n<pre><code>SELECT \n    *,  \n  ntile(10) OVER (ORDER BY column_name)\nFROM test</code></pre><ul>\n<li>The clause <code>OVER</code> is required</li>\n<li><code>OVER</code> accepts the clauses <code>ORDER BY</code> and / or <code>PARTITION BY</code> followed by the desired column-name</li>\n</ul>"
  },
  {
    "question": "<p>In PSQL what does the function <code>percent_rank()</code> do and how can it be used?</p>",
    "answer": "<p>The function <code>percent_rank()</code> find the percentage (value between 0 and 1) each value in the given column using the columns smallest value as 0% and highest value as 100%</p>\n<pre><code>SELECT \n    *,  \n  percent_rank() OVER (ORDER BY column_name)\nFROM test\nFROM test</code></pre><ul>\n<li>The clause <code>OVER</code> is required</li>\n<li><code>OVER</code> accepts the clauses <code>ORDER BY</code> and / or <code>PARTITION BY</code> followed by the desired column-name</li>\n</ul>\n<p><a href=\"https://www.postgresqltutorial.com/postgresql-percent_rank-function/\">postgresql-percent_rank-function/postgresqltutorial.com</a></p>"
  },
  {
    "question": "<p>In Regex what is a &quot;Lookahead&quot; how would you use a positive and negative Lookahead</p>",
    "answer": "<p>A Lookahead allows is a regex pattern which allows you to define which characters are allowed and not allowed to follow others.</p>\n<ul>\n<li>Positive Lookahead /r(?=e)/g</li>\n<li>Negative Lookahead /r(?!e)/g</li>\n</ul>\n<p><em>Warning not all regex engine allow are regex within the Lookahead</em></p>\n<p>In the following examples the bold characters match the given regex</p>\n<hr>\n<p>Regex - /r(?!e)/g\nread <strong>r</strong>oom <strong>r</strong>adio real <strong>r</strong>ope</p>\n<p>Any &quot;r&quot; characters which are not followed by &quot;e&quot; are matched</p>\n<hr>\n<p>Regex - /r(?=e)/g\nread <strong>r</strong>oom <strong>r</strong>adio real <strong>r</strong>ope</p>\n<p>Any &quot;r&quot; characters which are followed by &quot;e&quot; are matched</p>\n<hr>\n<p>Regex - /r(?!e|o)/g\nread room <strong>r</strong>adio real rope</p>\n<p>Any &quot;r&quot; characters which are followed by &quot;e&quot; or &quot;o&quot; are not matched</p>\n<hr>\n<p>Regex - /r(?!.<em>r)/g\nread room radio real *</em>r**ope</p>\n<p>Any &quot;r&quot; characters which are not followed by another &quot;r&quot; character in any position are matched (useful for finding the last instance of a char)</p>\n<hr>"
  },
  {
    "question": "<p>In Regex what is a &quot;lookbehind&quot; how would you use a positive and negative lookbehind</p>",
    "answer": "<p>A ()) allows is a regex pattern which allows you to define which characters are allowed and not allowed to follow others.</p>\n<ul>\n<li>Positive Lookbehind /(?&lt;=\\s)r/g</li>\n<li>Negative Lookbehind /(?&lt;!\\s)r/g</li>\n</ul>\n<p><em>Warning not all regex engine allow are regex within the Lookbehind</em></p>\n<p>In the following examples the bold characters match the given regex</p>\n<hr>\n<p>Regex - /(?&lt;=\\s)r/g\nread <strong>r</strong>oom <strong>r</strong>adio <strong>r</strong>eal <strong>r</strong>ope</p>\n<p>Any &quot;r&quot; characters which are preceded by a space are matched</p>\n<hr>\n<p>Regex - /(?&lt;!\\s)r/g\n<strong>r</strong>ead room radio real rope</p>\n<p>Any &quot;r&quot; characters which are not preceded by a space are not matched</p>\n<hr>"
  },
  {
    "question": "<p>In PSQL what does the function <code>rank()</code> do and how can it be used?</p>",
    "answer": "<p>The function <code>rank()</code> assigns each rank based on the column name provided </p>\n<pre><code>SELECT \n    *,  \n  row_number() OVER (ORDER BY column_name)\nFROM test</code></pre><ul>\n<li>The clause <code>OVER</code> is required</li>\n<li><code>OVER</code> accepts the clauses <code>ORDER BY</code> and / or <code>PARTITION BY</code> followed by the desired column-name</li>\n<li>Rows with equal values will receive the same ranking</li>\n</ul>"
  },
  {
    "question": "<p>In PSQL what does the function <code>row_number()</code> do and how can it be used?</p>",
    "answer": "<p>The function <code>row_number()</code> assigns each row a sequentially increasing integer</p>\n<pre><code>SELECT \n    *,  \n  row_number() OVER (ORDER BY column_name)\nFROM test</code></pre><ul>\n<li>The clause <code>OVER</code> is required</li>\n<li><code>OVER</code> accepts the clauses <code>ORDER BY</code> and / or <code>PARTITION BY</code> followed by the desired column-name</li>\n</ul>\n<p><a href=\"https://www.postgresqltutorial.com/postgresql-row_number/\">postgresql-row_number/postgresqltutorial.com</a></p>"
  },
  {
    "question": "<p>In PSQL what rules are applied when using the <code>UNION</code> operator</p>",
    "answer": "<ul>\n<li>All duplicate rows are removed (unless <code>UNION ALL</code> is used).</li>\n<li>Both queries must return the same number of columns.</li>\n<li>The corresponding columns in the queries must have compatible data types.</li>\n</ul>"
  },
  {
    "question": "<p>In PSQL what are the 2 byte and and 8 bytes of the type SERIAL</p>",
    "answer": "<ul>\n<li>SMALLSERIAL (1 to 32,767)</li>\n<li>BIGSERIAL (1 to 9,223,372,036,854,775,807)</li>\n</ul>"
  },
  {
    "question": "<p>In PSQL what is the following &quot;CREATE TABLE&quot; clause shorthand for...</p>\n<pre><code>CREATE TABLE table_name(\n    id SERIAL\n);</code></pre>",
    "answer": "<pre><code>CREATE SEQUENCE table_name_id_seq;\n\nCREATE TABLE table_name (\n    id integer NOT NULL DEFAULT nextval(&#39;table_name_id_seq&#39;)\n);\n\nALTER SEQUENCE table_name_id_seq\nOWNED BY table_name.id;</code></pre>"
  },
  {
    "question": "<p>What would happen if you create a temporary table with the same name as a permanant table?</p>",
    "answer": "<p>When a temporary table and a permanant table share a name the result of querying the table name will come from the temporary table. The temp table will hide the permanant table (this is not advised).</p>"
  },
  {
    "question": "<p>In PSQL how would you create a temporary table, who could view the table and what would the life span of this table be?</p>",
    "answer": "<ul>\n<li>To create a temporary table</li>\n</ul>\n<pre><code>CREATE TEMP TABLE table_name(\n  ...\n);</code></pre><p>Temporary tables </p>\n<ul>\n<li>Are only visible to the session which created it </li>\n<li>Are removed when the current session ends.</li>\n</ul>"
  },
  {
    "question": "<p>In PSQL had do you use the function &quot;TO_CHAR&quot; with data objects</p>",
    "answer": "<ul>\n<li><p>SELECT TO_CHAR((NOW()) :: DATE, &#39;yyyy-mm-dd&#39;)</p>\n</li>\n<li><p>SELECT TO_CHAR((NOW() - interval &#39;10 days&#39;) :: DATE, &#39;yyyy-mm-dd&#39;)</p>\n</li>\n</ul>"
  },
  {
    "question": "<p>In PSQL what is the syntax for a query using the <code>UNION</code> operator</p>",
    "answer": "<pre><code>SELECT *\nFROM table_1\nUNION\nSELECT *\nFROM table_2;</code></pre><pre><code>SELECT name, age\nFROM table_1\nUNION ALL\nSELECT name, age\nFROM table_2\nORDER BY age DESC;</code></pre>"
  },
  {
    "question": "<p>In PSQL what is an OID?</p>",
    "answer": "<p>An OID (Object identifier) is an internal id used to reference tables</p>\n<p><a href=\"https://www.postgresql.org/docs/12/datatype-oid.html\">postgresql docs - 8.19. Object Identifier Types</a> </p>"
  },
  {
    "question": "<p>In PSQL window functions what does <code>PARTITION BY</code> do?</p>",
    "answer": "<p><code>PARTITION BY</code> applies the function within specific windows. </p>\n<hr>\n<p>In example 1 row numbers are partitioned by event_year</p>\n<pre><code>example 1\n\nSELECT \n    *,  \n  row_number() OVER (PARTITION BY event_year ORDER BY event_year) AS row\nFROM test</code></pre><p>This means each unique event year will be a window, with its own sequentially increasing row number (ORDER BY is optional)</p>\n<hr>\n<p>In example 2 rank is partitioned by age and ordered by by event_year</p>\n<pre><code>example 2\n\nSELECT \n    *,  \n  rank() OVER (PARTITION BY event_year ORDER BY age) AS rank\nFROM test</code></pre><p>This means rows with the same event_year will ranked separate from all other rows and ranking will be done in age order (with equal ages receiving the same rank). </p>\n<hr>\n<p>In example 3 partitioning is done by both age and event_year</p>\n<pre><code>example 3\n\nSELECT \n    *,  \n  rank() OVER (PARTITION BY age,event_year) AS rank\nFROM test</code></pre><p>This means rows with the same event_year will ranked separate from all other rows and ranking will be done in age order (with equal ages receiving the same rank). </p>\n<hr>"
  },
  {
    "question": "<p>In SQL how does the <code>HAVING</code> operator work?</p>",
    "answer": "<p>The operator <code>HAVING</code> is uesd to apply conditions to a query while grouping data.</p>\n<pre><code>SELECT count(*) \nFROM person \nGROUP BY age \nHAVING age&lt;=30</code></pre><pre><code>SELECT count(*) person_count, age \nFROM person \nGROUP BY age \nHAVING person_count&gt;=3</code></pre>"
  },
  {
    "question": "<p>In SQL what are the different types of Joins</p>",
    "answer": "<ul>\n<li>Left / Right Inner Join </li>\n<li>Left / Right Outer Join</li>\n<li>Full Outer Join</li>\n<li>Self Join</li>\n<li>Cross Join</li>\n<li>Natural Join</li>\n</ul>"
  }
]
